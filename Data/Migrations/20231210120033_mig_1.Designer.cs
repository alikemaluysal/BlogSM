// <auto-generated />
using System;
using Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231210120033_mig_1")]
    partial class mig_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 10, 15, 0, 32, 654, DateTimeKind.Local).AddTicks(7801),
                            Name = "Bilim"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 10, 15, 0, 32, 654, DateTimeKind.Local).AddTicks(7804),
                            Name = "Yazılım"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 12, 10, 15, 0, 32, 654, DateTimeKind.Local).AddTicks(7805),
                            Name = "Teknoloji"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 12, 10, 15, 0, 32, 654, DateTimeKind.Local).AddTicks(7805),
                            Name = "Sağlık"
                        });
                });

            modelBuilder.Entity("Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 12, 10, 15, 0, 32, 654, DateTimeKind.Local).AddTicks(7783),
                            Email = "admin@mail.com",
                            PasswordHash = new byte[] { 250, 46, 75, 121, 210, 151, 206, 155, 63, 88, 235, 249, 236, 74, 185, 112, 18, 137, 229, 221, 47, 37, 248, 130, 248, 154, 2, 126, 65, 120, 52, 21, 192, 183, 192, 155, 138, 124, 31, 6, 176, 151, 91, 147, 199, 17, 62, 45, 123, 63, 81, 65, 208, 213, 53, 93, 250, 160, 135, 103, 238, 205, 44, 187 },
                            PasswordSalt = new byte[] { 167, 139, 49, 206, 118, 146, 154, 15, 207, 126, 155, 240, 67, 117, 26, 39, 6, 186, 23, 176, 171, 63, 107, 59, 50, 79, 158, 85, 246, 66, 134, 222, 243, 253, 133, 246, 111, 195, 65, 233, 251, 136, 88, 79, 115, 108, 38, 26, 164, 188, 251, 24, 118, 210, 136, 132, 236, 132, 56, 227, 253, 65, 233, 179, 223, 252, 155, 212, 119, 167, 6, 209, 191, 244, 65, 166, 180, 169, 58, 199, 126, 96, 170, 245, 244, 13, 0, 196, 104, 132, 248, 29, 34, 49, 32, 84, 140, 87, 185, 55, 157, 174, 217, 154, 155, 99, 9, 135, 189, 204, 23, 242, 180, 182, 214, 81, 34, 94, 153, 178, 191, 109, 242, 104, 44, 242, 175, 230 },
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 12, 10, 15, 0, 32, 654, DateTimeKind.Local).AddTicks(7798),
                            Email = "kemal@mail.com",
                            PasswordHash = new byte[] { 250, 46, 75, 121, 210, 151, 206, 155, 63, 88, 235, 249, 236, 74, 185, 112, 18, 137, 229, 221, 47, 37, 248, 130, 248, 154, 2, 126, 65, 120, 52, 21, 192, 183, 192, 155, 138, 124, 31, 6, 176, 151, 91, 147, 199, 17, 62, 45, 123, 63, 81, 65, 208, 213, 53, 93, 250, 160, 135, 103, 238, 205, 44, 187 },
                            PasswordSalt = new byte[] { 167, 139, 49, 206, 118, 146, 154, 15, 207, 126, 155, 240, 67, 117, 26, 39, 6, 186, 23, 176, 171, 63, 107, 59, 50, 79, 158, 85, 246, 66, 134, 222, 243, 253, 133, 246, 111, 195, 65, 233, 251, 136, 88, 79, 115, 108, 38, 26, 164, 188, 251, 24, 118, 210, 136, 132, 236, 132, 56, 227, 253, 65, 233, 179, 223, 252, 155, 212, 119, 167, 6, 209, 191, 244, 65, 166, 180, 169, 58, 199, 126, 96, 170, 245, 244, 13, 0, 196, 104, 132, 248, 29, 34, 49, 32, 84, 140, 87, 185, 55, 157, 174, 217, 154, 155, 99, 9, 135, 189, 204, 23, 242, 180, 182, 214, 81, 34, 94, 153, 178, 191, 109, 242, 104, 44, 242, 175, 230 },
                            Role = "Reader",
                            Username = "kemal"
                        });
                });

            modelBuilder.Entity("Entities.Comment", b =>
                {
                    b.HasOne("Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.HasOne("Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.HasOne("Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
